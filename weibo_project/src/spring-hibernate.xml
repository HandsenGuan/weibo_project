<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans     
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
        ">

	 <!-- Hibernate4 -->
    <!-- 加载资源文件  其中包含变量信息，必须在Spring配置文件的最前面加载，即第一个加载-->
    <context:property-placeholder location="classpath:persistence-mysql.properties" />

	<!--支持aop注解 -->
	<aop:aspectj-autoproxy />

	 <!-- 数据库映射 -->
	<!--配置数据库连接池DBCP -->
	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource">
		<property name="driverClassName" value="${jdbc.driverClassName}"></property>
		<property name="url" value="${jdbc.url}"></property>
		<property name="username" value="${jdbc.user}"></property>
		<property name="password" value="${jdbc.pass}"></property>
	</bean>


	<!--配置sessionFactory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>

		<property name="packagesToScan">
			<list>
                <!-- 可以加多个包 -->
                <value>com.guan.weibo</value>
                <value>test</value>
            </list>
		</property>
		
		<property name="hibernateProperties">
			<props>
				<!--配置方言  -->
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				
				<!-- 显示实际操作数据库时的SQL ${hibernate.show_sql}-->
				<prop key="hibernate.show_sql" >true</prop>
				
				<!--在log和console中打印出更漂亮的SQL -->
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				
				<!--将数据库schema的DDL导出到数据库-->
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				
				<!-- JDBC connection pool (use the built-in) -->
				<prop key="connection.pool_size">5</prop>
				
				 <!-- Enable Hibernate's automatic session context management -->
				<!-- <prop key="current_session_context_class">thread</prop> -->
				<prop key="hibernate.current_session_context_class">thread</prop>
				
				<prop key="cache.use_query_cache">true</prop>
				<prop key="cache.use_second_level_cache">true</prop>
				<prop key="cache.use_structured_entries">true</prop>
				
				<!--缓存配置  -->
				<prop key="cache.region.factory_class">org.hibernate.cache.EhCacheRegionFactory</prop>
				<prop key="net.sf.ehcache.configurationResourceName">ehcache.xml</prop>
				
			</props>
		</property>
		
	</bean>
	
	 <!-- 配置Hibernate事务管理器 -->
    <bean id="transactionManager"
        class="org.springframework.orm.hibernate4.HibernateTransactionManager">
      <property name="sessionFactory" ref="sessionFactory" />
   </bean>


	<!-- 配置事务异常封装 -->
   <bean id="persistenceExceptionTranslationPostProcessor" 
       class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />
	
	<!--  声明式容器事务管理 ,transaction-manager指定事务管理器为transactionManager -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="add*" propagation="REQUIRED" /> 
            <tx:method name="delete*" propagation="REQUIRED" /> 
            <tx:method name="update*" propagation="REQUIRED" /> 
            <tx:method name="remove*" propagation="REQUIRED"/>
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="find*" read-only="true" propagation="REQUIRED"/>
            <tx:method name="get*" read-only="true" propagation="REQUIRED"/>
            <tx:method name="*" />
        </tx:attributes>
    </tx:advice>
    
    <aop:config expose-proxy="true">
        <!-- 只对业务逻辑层实施事务 -->
        <aop:pointcut id="txPointcut" expression="execution(* com.guan.weibo..service..*.*(..))" />
        <!-- Advisor定义，切入点和通知分别为txPointcut、txAdvice -->
        <aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice"/>
    </aop:config>
    
   
    
    

</beans>